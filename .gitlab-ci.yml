#variables:
#  DOCKER_IMAGE_DASHBOARD: dashboard
#  DOCKER_IMAGE_API: api
#  DOCKER_REGISTRY_HOST: registry.cn-hongkong.aliyuncs.com/f2c
#  DOCKER_IMAGE_DASHBOARD_URL: ${DOCKER_REGISTRY_HOST}/${DOCKER_IMAGE_DASHBOARD}
#  DOCKER_IMAGE_API_URL: ${DOCKER_REGISTRY_HOST}/${DOCKER_IMAGE_API}

#before_script:
#  - if [ ! -z "${CI_COMMIT_SHA}" ]; then export APP_VERSION="${CI_COMMIT_SHA:0:8}"; fi
#  - if [ ! -z "${CI_COMMIT_TAG}" ]; then export APP_VERSION="${CI_COMMIT_TAG}"; fi

stages:
  - test
#  - build
#  - deploy

test:
  stage: test
#  only:
#    - /^v\d+\.\d+\.\d+-alpha\.\d+$/
#    - ci
  image: docker:24.0.9
  services:
    - docker:24.0.9-dind
#  artifacts:
#    paths:
#      - dev-ops/videos/*.mp4
#    exclude:
#      - dashboard/**/*
#      - api/**/*
#    untracked: true
#    when: on_failure
  script:
    - apk add --no-cache docker-compose
    - mkdir data
    - chmod 777 data
    - ./ci-build.sh
    - ./ci-app-run.sh
    - ./ci-test.sh

#build_dashboard:
#  stage: build
#  only:
#    - /^v\d+\.\d+\.\d+-alpha\.\d+$/
#  image: docker:20.10.2
#  services:
#    - docker:20.10.2-dind
#  script:
#    - apk add --no-cache docker-compose
#    - dev-ops/env-test config
#    - dev-ops/env-test up -d
#    - dev-ops/core/bin/env-exec test nodejs dashboard yarn
#    - dev-ops/core/bin/env-exec test nodejs dashboard yarn build:prod
#    - docker login ${DOCKER_REGISTRY_HOST} -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD}
#    - cd dashboard
#    - docker build -t ${DOCKER_IMAGE_DASHBOARD} ${PWD}
#    - docker tag ${DOCKER_IMAGE_DASHBOARD}:latest ${DOCKER_IMAGE_DASHBOARD}:${APP_VERSION}
#    - docker tag ${DOCKER_IMAGE_DASHBOARD}:latest ${DOCKER_IMAGE_DASHBOARD_URL}:latest
#    - docker tag ${DOCKER_IMAGE_DASHBOARD}:${APP_VERSION} ${DOCKER_IMAGE_DASHBOARD_URL}:${APP_VERSION}
#    - docker push ${DOCKER_IMAGE_DASHBOARD_URL}:latest
#    - docker push ${DOCKER_IMAGE_DASHBOARD_URL}:${APP_VERSION}
#
#build_api:
#  stage: build
#  only:
#    - /^v\d+\.\d+\.\d+-alpha\.\d+$/
#  image: docker:20.10.2
#  services:
#    - docker:20.10.2-dind
#  script:
#    - apk add --no-cache docker-compose
#    - dev-ops/env-test config
#    - dev-ops/env-test up -d
#    - dev-ops/core/bin/env-exec test jdk api ./gradlew build -x test -x cucumber
#    - docker login ${DOCKER_REGISTRY_HOST} -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD}
#    - cd api
#    - cp apps/f2c/build/libs/f2c.jar app.jar
#    - docker build -t ${DOCKER_IMAGE_API} ${PWD}
#    - docker tag ${DOCKER_IMAGE_API}:latest ${DOCKER_IMAGE_API}:${APP_VERSION}
#    - docker tag ${DOCKER_IMAGE_API}:latest ${DOCKER_IMAGE_API_URL}:latest
#    - docker tag ${DOCKER_IMAGE_API}:${APP_VERSION} ${DOCKER_IMAGE_API_URL}:${APP_VERSION}
#    - docker push ${DOCKER_IMAGE_API_URL}:latest
#    - docker push ${DOCKER_IMAGE_API_URL}:${APP_VERSION}
#
#deploy:
#  stage: deploy
#  only:
#    - /^v\d+\.\d+\.\d+-alpha\.\d+$/
#  image: gaoermai/alpine-ci:v1.0.0-alpha.6
#  script:
#    - echo "${DEPLOY_PRIVATE_KEY}" > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - |
#      ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T ${PROD_USER_NAME}@${PROD_SERVER} "bash -is" << EOSSH
#      sudo docker login ${DOCKER_REGISTRY_HOST} -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD}
#      cd ~/f2c
#      echo "APP_VERSION=${APP_VERSION}" > .env
#      sudo --preserve-env docker-compose up -d --remove-orphans
#      EOSSH
#    - rm ~/.ssh/id_rsa
#
